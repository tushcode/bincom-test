/*
'########:'##::::'##::'######::'##::::'##::'######:::'#######::'########::'########:
... ##..:: ##:::: ##:'##... ##: ##:::: ##:'##... ##:'##.... ##: ##.... ##: ##.....::
::: ##:::: ##:::: ##: ##:::..:: ##:::: ##: ##:::..:: ##:::: ##: ##:::: ##: ##:::::::
::: ##:::: ##:::: ##:. ######:: #########: ##::::::: ##:::: ##: ##:::: ##: ######:::
::: ##:::: ##:::: ##::..... ##: ##.... ##: ##::::::: ##:::: ##: ##:::: ##: ##...::::
::: ##:::: ##:::: ##:'##::: ##: ##:::: ##: ##::: ##: ##:::: ##: ##:::: ##: ##:::::::
::: ##::::. #######::. ######:: ##:::: ##:. ######::. #######:: ########:: ########:
:::..::::::.......::::......:::..:::::..:::......::::.......:::........:::........::                                                                                   


* Tushcode - JS Boilerplate v1.0.0 (https://tushcode.com/)
* Copyright 2022-2023 Tushcode Developer
* Licensed under SEE_LICENSE (https://github.com/tushcode/LICENSE)
*/

function baseurl() {
  const isLocalhost = Boolean(
      window.location.hostname === "localhost" ||
          // [::1] is the IPv6 localhost address.
          window.location.hostname === "[::1]" ||
          // 127.0.0.1/8 is considered localhost for IPv4.
          window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)
  );
  if (isLocalhost == true) {
      var url = window.location.protocol + "//" + window.location.host + "/" + window.location.pathname.split("/")[1];
  } else {
      var url = location.origin;
  }
  return url;
}

const controller = new AbortController();
const signal = controller.signal;

window.screenLock = null;
window.curlink = document.URL.split("?")[0].split("#")[0];
window.page = window.location.pathname.split("/").pop();

var isMobile = {
  Android: function () {
      return navigator.userAgent.match(/Android/i);
  },
  BlackBerry: function () {
      return navigator.userAgent.match(/BlackBerry/i);
  },
  iOS: function () {
      return navigator.userAgent.match(/iPhone|iPad|iPod/i);
  },
  Opera: function () {
      return navigator.userAgent.match(/Opera Mini/i);
  },
  Windows: function () {
      return navigator.userAgent.match(/IEMobile/i);
  },
  any: function () {
      return isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() || isMobile.Opera() || isMobile.Windows();
  },
};

function inputCopy(from) {
  let input_copy = $(document).find(`${from}`).val();
  navigator.clipboard.writeText(input_copy);
  $(document).find(`${from}`).focus();
}

function loadJS(FILE_URL, async = true) {
  let scriptEle = document.createElement("script");

  scriptEle.setAttribute("src", FILE_URL);
  scriptEle.setAttribute("type", "text/javascript");
  scriptEle.setAttribute("async", async);

  document.body.appendChild(scriptEle);

  // success event
  scriptEle.addEventListener("load", () => {
      console.log("File loaded");
  });
  // error event
  scriptEle.addEventListener("error", (ev) => {
      console.log("Error on loading file", ev);
  });
}

function isPageActive() {
  document.addEventListener("visibilitychange", function (ev) {
      let state = document.visibilityState;
      if (state === "visible") {
          return true;
      } else if (state === "hidden") {
          return false;
      }
  });
}

function DateCountDown(dt, id) {
  var end = new Date(dt);

  var _second = 1000;
  var _minute = _second * 60;
  var _hour = _minute * 60;
  var _day = _hour * 24;
  var timer;

  function showRemaining() {
      var now = new Date();
      var distance = end - now;
      if (distance < 0) {
          clearInterval(timer);
          document.getElementById(id).innerHTML = "HOLD ON!";

          return;
      }
      var days = Math.floor(distance / _day);
      var hours = Math.floor((distance % _day) / _hour);
      var minutes = Math.floor((distance % _hour) / _minute);
      var seconds = Math.floor((distance % _minute) / _second);

      document.getElementById(id).innerHTML = days + " Days ";
      document.getElementById(id).innerHTML += hours + " Hrs ";
      document.getElementById(id).innerHTML += minutes + " Mins ";
      document.getElementById(id).innerHTML += seconds + "secs";
  }

  timer = setInterval(showRemaining, 1000);
}

async function screenAwake(status = true) {
  if ("wakeLock" in navigator) {
      if (status === true) {
          try {
              screenLock = await navigator.wakeLock.request("screen");
          } catch (err) {
              console.log(err.name, err.message);
          }
          return screenLock;
      } else {
          screenLock.release().then(() => {
              console.log("Lock released ðŸŽˆ");
              screenLock = null;
          });
      }
  } else {
      console.log("Wake lock is not supported by this browser.");
  }
}

if (document.querySelector(".dropify")) {
  $(document)
      .find(".dropify")
      .dropify({
          messages: {
              default: "Only images under 2MB in size are permitted.",
              replace: "Drag or click to Replace",
              remove: "Remove",
              error: "Ooops, something wrong happened.",
          },
      });
}

if (document.querySelector(".tush-uploader")) {
  document.querySelectorAll(".tush-uploader")?.forEach((el) => {
      var box_width = el.getAttribute("uploader-width");
      var box_height = el.getAttribute("uploader-height");

      el.removeAttribute("hidden");
      el.style.width = box_width;
      el.style.height = box_height;
      el.style.border = "1.5px dashed rgba(0, 0, 0, 0.1)";
      el.style["padding"] = "10px 15px";
      el.style["cursor"] = "pointer";
      el.style["align-items"] = "center";
      el.style["text-align"] = "center";
      el.style["border-radius"] = "5px";
      el.style["overflow"] = "hidden";

      el.querySelector(".uploader-preview").style["margin"] = "5px 2px";
      el.querySelector("img").style.width = "80px";
      el.querySelector("img").style.height = "80px";
      el.querySelector("img").style["border-radius"] = "5px";
      el.querySelector("img").style["z-index"] = "10";

      el.querySelector("[uploader-trigger]")?.addEventListener("click", (event) => {
          event.preventDefault();
          el.querySelector("input[uploader-file]").click();
      });

      el.querySelector("[uploader-file]")?.addEventListener("change", (event) => {
          event.preventDefault();
          const image_preview = el.querySelector(".uploader-preview img");
          const fileReader = new FileReader();
          fileReader.onload = function () {
              image_preview.src = fileReader.result;
          };
          fileReader.readAsDataURL(event.target.files[0]);
      });
  });
}

function isEmpty(str) {
  return !str || str.length === 0 || str == null || str === "";
}

function randTXT(length) {
  var result = "";
  var characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  var charactersLength = characters.length;
  for (var i = 0; i < length; i++) {
      result += characters.charAt(Math.floor(Math.random() * charactersLength));
  }
  return result;
}

document.querySelectorAll(".num")?.forEach((el) => {
  let events;
  for (events of ["change", "keyup", "paste", "blur"]) {
      el.addEventListener(events, function (ev) {
          el.value = el.value.replace(/[^0-9.]/g, "").replace(/(\..*)\./g, "$1");
      });
  }
});

document.querySelectorAll(".check-all-box")?.forEach((el) => {
  el.addEventListener("change", function (ev) {
      var checkboxClass = ev.target.getAttribute("class");

      var _checkboxes = document.querySelectorAll(`input[type=checkbox]:not(${checkboxClass})`);
      for (var i = 0; i < _checkboxes.length; i++) {
          _checkboxes[i].checked = ev.target.checked;
      }

      var bulk_action = document.querySelector('.bulk-action');

      if(ev.target.checked && bulk_action){
        bulk_action.disabled = false;
        document.querySelector('.bulk-action-btn').disabled = false;
      }else{
        if(bulk_action){
            bulk_action.disabled = true;
            document.querySelector('.bulk-action-btn').disabled = true;
        }
      }
  });
});

document.querySelectorAll(".currency")?.forEach((el) => {
  let events;
  for (events of ["change", "keyup", "paste", "blur"]) {
      el.addEventListener(events, function (ev) {
          el.value = el.value
              .replace(/(?!\.)\D/g, "")
              .replace(/(?<=\..*)\./g, "")
              .replace(/(?<=\.\d\d).*/g, "")
              .replace(/\B(?=(\d{3})+(?!\d))/g, ",");
      });
  }
});

document.querySelectorAll(".text-length")?.forEach((el) => {
  let events;
  for (events of ["change", "keyup", "paste", "blur"]) {
      el.addEventListener(events, function (ev) {
          var len = el.getAttribute("data-length");
          el.value = el.value.substr(0, len);
      });
  }
});

function readOnly(inputs, action = true) {
  let elem = inputs.elements;
  for (var i = 0, len = elem.length; i < len; ++i) {
      elem[i].readOnly = action;
  }
}

function progressBar(percent) {
  var bar = document.querySelector(".progress-bar");
  bar.style.width = percent + "%";
  bar.setAttribute("aria-valuenow", percent);
}

function isRequiredEmpty(elem) {
  var value_elem = !elem.value || elem.value.length === 0 || elem.value == null || elem.value === "";
  if (elem.hasAttribute("required") && value_elem == true) {
      return true;
  }

  return false;
}

function isInArray(value, array) {
  return array.indexOf(value) > -1;
}

function clearValue(target) {
  document.querySelector(target).value = "";
}

function urlParam(sParam) {
  let sPageURL = window.location.search.substring(1),
      sURLVariables = sPageURL.split("&"),
      sParameterName,
      i;

  for (i = 0; i < sURLVariables.length; i++) {
      sParameterName = sURLVariables[i].split("=");

      if (sParameterName[0] === sParam) {
          return typeof sParameterName[1] === undefined ? true : decodeURIComponent(sParameterName[1]);
      }
  }
  return false;
}

function ageRange(from, to) {
  var years = [];
  var from_date = new Date();
  from_date.setFullYear(from_date.getFullYear() - from);
  var _from = from_date.getFullYear();

  var to_date = new Date();
  to_date.setFullYear(to_date.getFullYear() - to);
  var _to = to_date.getFullYear();

  while (_to <= _from) {
      years.push(_to++);
  }
  return years;
}

function removeOptions(selectElement) {
  var i,
      L = selectElement.options.length - 1;
  for (i = L; i >= 0; i--) {
      selectElement.remove(i);
  }
}

function addOptions(container, txt, val) {
  var elem = document.createElement("option");
  elem.textContent = txt;
  elem.value = val;
  container.add(elem);
}

function sureModal(text) {
  let sureDiv = document.createElement("div");
  sureDiv.classList.add("modal", "fade");
  sureDiv.setAttribute("id", "sureModal");
  sureDiv.setAttribute("tabindex", "-1");
  sureDiv.setAttribute("aria-labelledby", "sureModalLabel");
  sureDiv.setAttribute("aria-hidden", "true");
  sureDiv.innerHTML = `<div class="modal-dialog modal-dialog-centered"> <div class="modal-content py-5 shadow-sm"> <div class="modal-body py-5 text-center"> <img width="80" src="${baseurl()}/assets/images/modal/warning.png" class="img-fluid mb-4"/> <h3 class="mb-4 fw-bold">Are You Sure ?</h3> <p class="mb-0 h5">${text}</p></div><div class="modal-footer mx-auto border-top-0"> <button button type="button" class="btn btn-primary rounded-4 modal-confirm fs-6 px-5" data-bs-dismiss="modal">Proceed!</button> <button type="button" class="btn btn-danger rounded-4 modal-cancel fs-6 px-5" data-bs-dismiss="modal">Return</button> </div></div></div>`;

  document.body.appendChild(sureDiv);
  const sureModal = new bootstrap.Modal(document.getElementById("sureModal"), {
      keyboard: false,
      backdrop: "static",
  });
  sureModal.show();

  document.getElementById("sureModal")?.addEventListener("shown.bs.modal", (event) => {
      const otherModal = bootstrap.Modal.getInstance(document.querySelector(".modal:not(#sureModal)"));
      if (!isEmpty(otherModal)) {
          otherModal.hide();
      }
  });

  document.getElementById("sureModal")?.addEventListener("hidden.bs.modal", (event) => {
      sureModal.hide();
      event.target.remove();
  });
}

function popModal(response, texts, btnTxt = "Close", other_btn = false) {
  var btn_press,
      modalTitle,
      btnSecond = ``;
  let img_src = `${baseurl()}/assets/images/modal/${response}.png`;

  if (response == "success") {
      modalTitle = "Processing Completed!";
      btn_press = "btn-success text-white";
  } else if (response == "info") {
      modalTitle = "Be knowledgeable!";
      btn_press = "btn-info text-white";
  } else if (response == "warning") {
      modalTitle = "Opps, So Sorry";
      btn_press = "btn-warning text-white";
  } else {
      modalTitle = "Unable to Process!";
      btn_press = "btn-danger text-white";
  }

  if (other_btn != false) {
      btnSecond = `<button button type="button" class="btn btn-dark rounded-4 btn-other fs-6 px-5 mb-2">${other_btn}</button>`;
  }

  let popDiv = document.createElement("div");
  popDiv.classList.add("modal", "fade");
  popDiv.setAttribute("id", "popModal");
  popDiv.setAttribute("tabindex", "-1");
  popDiv.setAttribute("aria-labelledby", "popModalLabel");
  popDiv.setAttribute("aria-hidden", "true");

  popDiv.innerHTML = `<div class="modal-dialog modal-dialog-centered modal-md"> <div class="modal-content py-5 shadow-sm"> <div class="modal-body py-5 text-center"> <img width="80" src="${img_src}" class="img-fluid mb-4"/> <h3 class="mb-4 fw-bold">${modalTitle}</h3> <p class="mb-0 fw-normal">${texts}</p></div><div class="modal-footer border-top-0 mx-auto d-grid">${btnSecond}<button type="button" class="btn ${btn_press} rounded-4 modal-btn fs-6 px-5" data-bs-dismiss="modal">${btnTxt}</button></div></div></div>`;

  document.body.appendChild(popDiv);
  const popModal = new bootstrap.Modal(document.getElementById("popModal"), {
      keyboard: false,
      backdrop: "static",
  });
  popModal.show();

  document.getElementById("popModal")?.addEventListener("shown.bs.modal", (event) => {
      const otherModal = bootstrap.Modal.getInstance(document.querySelector(".modal:not(#popModal)"));
      if (!isEmpty(otherModal)) {
          otherModal.hide();
      }
  });

  document.getElementById("popModal")?.addEventListener("hidden.bs.modal", (event) => {
      popModal.hide();
      event.target.remove();
  });
}

function loadingModal(texts = null) {
  let txt = isEmpty(texts) ? "Your request is currently being processed." : texts;
  let loadDiv = document.createElement("div");
  loadDiv.classList.add("modal", "fade");
  loadDiv.setAttribute("id", "modalLoading");
  loadDiv.setAttribute("tabindex", "-1");
  loadDiv.setAttribute("aria-labelledby", "modalLoadingLabel");
  loadDiv.setAttribute("aria-hidden", "true");

  loadDiv.innerHTML = `<div class="modal-dialog modal-md modal-dialog-centered"> <div class="modal-content rounded-4 shadow py-5"> <div class="modal-body"> <div class="text-center py-5"> <div class="spinner-border text-warning" style="width: 4rem; height: 4rem;" role="status"> <span class="visually-hidden">Loading...</span> </div><h3 class="fw-bold">Please Wait!</h3> <p class="mb-2 mt-2 fw-normal">${txt}</p><h6 class="fw-bold load-percent"></h6> <div class="placeholder-glow"> <span class="placeholder text-warning col-6"></span> <span class="placeholder text-warning w-75"></span> <span class="placeholder text-warning col-6"></span> </div></div></div></div></div>`;

  document.body.appendChild(loadDiv);
  const modalLoading = new bootstrap.Modal(document.getElementById("modalLoading"), {
      keyboard: false,
      backdrop: "static",
  });
  modalLoading.show();

  document.getElementById("modalLoading")?.addEventListener("shown.bs.modal", (event) => {
      const otherModal = bootstrap.Modal.getInstance(document.querySelector(".modal:not(#modalLoading)"));
      if (!isEmpty(otherModal)) {
          otherModal.hide();
      }
  });
}

function hideLoad() {
  const modalLoading = bootstrap.Modal.getInstance(document.getElementById("modalLoading"));
  setTimeout(() => {
      modalLoading.hide();
  }, 500);

  document.getElementById("modalLoading")?.addEventListener("hidden.bs.modal", (event) => {
      // modalLoading.hide();
      event.target.remove();
  });
}

function abortData() {
  console.log("Now aborting");
  controller.abort();
}

const trigger_submit = new CustomEvent("form_submission", { cancelable: true });

function requiredForm(element) {
  var required_filled = true;
  element.querySelectorAll("[required]")?.forEach(function (input) {
      if (!required_filled) return;
      if (input.type === "radio" || input.type === "checkbox") {
          var radioValueCheck = false;
          element.querySelectorAll(`[name='${input.name}']`)?.forEach(function (radio) {
              if (radio.checked) radioValueCheck = true;
          });
          required_filled = radioValueCheck;
          return;
      }
      if (!input.value) {
          required_filled = false;
          return;
      }
  });

  return required_filled;
}

function triggerEQ() {
  setTimeout(() => {
      getData(`${baseurl()}/cron/send-queue/email?send=true`, false);
      console.log("send successful");
  }, 5000);
}

function formData(element) {
  var formParam = new FormData();
  for (var i = 0; i < element.length; i++) {
      if (element[i]) {
          if (element[i].type === "radio" || element[i].type === "checkbox") {
              if (element[i].checked) {
                  formParam.append(element[i].getAttribute("name"), element[i].value);
              }
          }

          if (element[i].type === "file") {
              if (element[i].files[0]) {
                  formParam.append(element[i].getAttribute("name"), element[i].files[0], element[i].files[0].name);
              }
          }

          if (element[i].type === "select-one" || element[i].type === "select-multiple") {
              formParam.append(element[i].getAttribute("name"), element[i].value);
          }

          if (element[i].type === "text" || element[i].type === "password" || element[i].type === "textarea" || element[i].type === "tel" || element[i].type === "number") {
              formParam.append(element[i].getAttribute("name"), element[i].value);
          }
      }
  }
  return formParam;
}

async function postForm(url, formBody, timeout = false) {
  // 20 second timeout:
  if (timeout != false) {
      const timeoutId = setTimeout(() => controller.abort(), timeout);
  }

  const formData = new URLSearchParams(new FormData(formBody));

  try {
      const response = await fetch(url, {
          method: "POST",
          headers: new Headers({
              "Cache-Control": "no-cache",
              "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
          }),
          body: formData,
          credentials: "same-origin",
          cache: "no-cache",
          signal: controller.signal,
      });

      if (!response.ok) {
          const message = `An error has occured: ${response.status}`;
          throw new Error(message);
      }

      return await response.json();
  } catch (error) {
      if (error.name === "AbortError") {
          hideLoad();
      } else {
          console.log("Fetch error: ", error);
      }
  }
}

async function postData(url, bodys = {}, timeout = 45000) {
  // 20 second timeout:
  const timeoutId = setTimeout(() => controller.abort(), timeout);

  try {
      const response = await fetch(url, {
          method: "POST",
          headers: new Headers({
              Accept: "application/json",
              "Cache-Control": "no-cache",
              "Content-Type": "application/json; charset=UTF-8",
          }),
          body: JSON.stringify(bodys),
          credentials: "include",
          cache: "no-cache",
          signal: controller.signal,
      });

      if (!response.ok) {
          // const message = `An error has occured: ${response.status}`;
          // throw new Error(message);
          return response.text().then((text) => {
              throw text;

              // if the error is an object and you just want to display some elements:
              //throw JSON.parse(text);
          });
      } else {
          clearTimeout(timeoutId);
          return await response.json();
      }
  } catch (error) {
      if (error.name === "AbortError") {
          hideLoad();
      } else {
          console.log("Fetch error: ", error);
      }
  }
}

async function getData(url = "", is_json = true) {
  try {
      const response = await fetch(url, {
          method: "GET",
          mode: "cors", // no-cors, *cors, same-origin
          cache: "no-cache",
          headers: {
              "Cache-Control": "no-cache",
              "Content-Type": "application/json; charset=UTF-8",
          },
          signal: controller.signal,
      });

      if (!response.ok) {
          const message = `An error has occured: ${response.status}`;
          throw new Error(message);
      }

      if (is_json == true) {
          return await response.json();
      } else {
          return await response.text();
      }
  } catch (error) {
      if (error.name === "AbortError") {
          hideLoad();
      } else {
          console.log("Fetch error: ", error);
      }
  }
}

async function xhrData(url = "", data, is_json = false, is_loading = false, timeout = false) {
  return new Promise((resolve, reject) => {
      // Set up the request
      var xhr = new XMLHttpRequest();
      // Open the connection
      xhr.open("POST", url, true);

      if (is_loading === true) {
          xhr.upload.onprogress = (event) => {
              // event.loaded - how many bytes downloaded
              // event.lengthComputable = true if the server sent Content-Length header
              // event.total - total number of bytes (if lengthComputable)
              if (event.lengthComputable) {
                  let percentComplete = (event.loaded / event.total) * 100;
                  document.querySelector(".load-percent").innerHTML = `${percentComplete}%`;
              } else {
                  let percentComplete = event.loaded;
                  document.querySelector(".load-percent").innerHTML = `${percentComplete}%`;
              }
          };
      }

      // only triggers if the request couldn't be made at all
      xhr.onerror = (evt) => {
          console.log(`Unable to make request: ${evt}`);
      };

      xhr.onreadystatechange = () => {
          if (xhr.readyState == 3) {
              if (is_loading === true) {
                  document.querySelector(".load-percent").innerHTML = "0%";
              }
          }

          if (xhr.readyState !== 4) {
              return;
          }
      };

      if (is_json != false) {
          xhr.responseType = "json";
          xhr.setRequestHeader("Content-type", "application/json; charset=utf-8");
      }
      xhr.setRequestHeader("Cache-Control", "no-cache");

      if (timeout != false) {
          xhr.timeout = timeout; // Set timeout to timeout seconds (in milliseconds)
          xhr.ontimeout = function () {
              alert("Timed out!!!");
          };
      }

      // Send the data.
      xhr.send(data);

      // Set up a handler for when the task for the request is complete
      xhr.onload = () => {
          if (xhr.status == 200) {
              // analyze HTTP status of the response

              if (is_json != false) {
                  resolve(xhr.response);
              } else {
                  resolve(JSON.parse(xhr.response));
              }
          } else {
              console.log(`Error ${xhr.status}: ${xhr.statusText}`); // 500: Internal server error
          }
      };
  });
}

if (document.querySelector("[queue-mail-checker]")) {
  triggerEQ();
}

function showNotify(heading, txt, link, options = [], banner = null) {
  const notification = new Notification(heading, {
      body: txt,
      badge: options.favicon,
      icon: options.logo,
      image: banner,
      lang: "en-US",
      vibrate: true,
      renotify: true,
      requireInteraction: true,
  });

  notification.onclick = (e) => {
      window.open(link);
  };

  notification.onclose = (e) => {};
}

function initializeTimer(timers, display, func, $vars = null) {
  var duration = timers * 60;
  var display = document.querySelector(display);
  if (localStorage.getItem("timer_counter")) {
      var timer_counters = localStorage.getItem("timer_counter");
  } else {
      localStorage.setItem("timer_counter", duration);
      timer_counters = duration;
  }

  var timer = timer_counters,
      minutes,
      seconds;
  window.timeinterval = setInterval(function () {
      minutes = parseInt(timer / 60, 10);
      seconds = parseInt(timer % 60, 10);

      minutes = minutes < 10 ? "0" + minutes : minutes;
      seconds = seconds < 10 ? "0" + seconds : seconds;

      display.textContent = minutes + ":" + seconds;

      if (--timer < 0) {
          localStorage.setItem("timer_counter", duration);
          timer = timer_counters;
          clearInterval(timeinterval);
          timerFunction(func, $vars);
      } else {
          localStorage.setItem("timer_counter", timer);
      }
  }, 1000);
}

function secTimer(times, updates, completes) {
  if (localStorage.getItem("counter")) {
      var meCount = localStorage.getItem("counter");
  } else {
      localStorage.setItem("counter", times);
      meCount = times;
  }

  if (localStorage.getItem("timer_end") === "false") {
      var timer_end = false;
  } else {
      var timer_end = true;
  }

  var interval = setInterval(function () {
      if (meCount <= 0) {
          localStorage.setItem("counter", times);
          localStorage.setItem("timer_end", true);
          meCount = times;

          clearInterval(interval);
          completes();
      } else {
          if (timer_end === false) {
              meCount = parseInt(meCount) - 1;
              localStorage.setItem("counter", meCount);
              updates(meCount);
          }
      }
  }, 1000);
}

function resendTimer($secs = 60) {
  function counter_func_end() {
      document.querySelector(".resend-text").removeAttribute("hidden");
      document.querySelector(".counter-text").setAttribute("hidden", true);
      document.querySelector(".resend-verify").removeAttribute("trigger");
  }

  if (localStorage.getItem("timer_end") === null) {
      document.querySelector(".resend-text").removeAttribute("hidden");
  } else if (localStorage.getItem("timer_end") === "true") {
      document.querySelector(".resend-text").removeAttribute("hidden");
  }

  secTimer(
      $secs,
      function (secTikcer) {
          document.querySelector(".resend-text").setAttribute("hidden", true);
          document.querySelector(".counter-text").removeAttribute("hidden");
          document.querySelector(".counter-func").innerHTML = secTikcer + "s";
      },
      counter_func_end
  );
}

  document.querySelector('#lga_polling')?.addEventListener("change", function (ev) {
    ev.preventDefault();
    const lga_value = ev.target.value;


    if(!isEmpty(lga_value)){
      ev.target.disabled = true;

      loadingModal('Please be patient while we retrieve the results of this local government poll.');

      postData(curlink, {"lga": lga_value}).then((resp) => {
        hideLoad();
        ev.target.disabled = false;

        if (resp.status == true) {
          const votes = resp.data['result'];
          document.querySelector('#lga-total').value = `Total Results: ${Number(votes).toLocaleString()}`;
        }else{
          popModal('warning', 'We apologize, but please choose any local government to retrieve its polling data.');
        }

      });
    }
    
  });

  document.forms.store_poll?.addEventListener("submit", function (ev) {
    ev.preventDefault();
    const data = this;

    const btn_submit = event.target.querySelector("button[type=submit]");

    if(requiredForm(data)){

      sureModal('In order to prevent any further problems when submitting this request, please ensure that all of the information is accurate.');

      document.querySelector('.modal-confirm')?.addEventListener("click", function(event){
        event.preventDefault();
        
        btn_submit.disabled = true;
        readOnly(data);
        loadingModal();

        postForm(curlink, data).then((resp) => {
          hideLoad();
          btn_submit.disabled = false;
          readOnly(data, false);
    
          if (resp.status == true) {

            // RESET ALL FORM VALUES TO AVOID DUPLICATES
            data.reset();

            popModal("success", resp.data["message"]);

          }else{
            popModal("warning", resp.data["message"]);
          }
        });

      });
    }else{
      popModal('warning', 'We apologize, but you have not yet completed the necessary fields.');
    }

    




  });
